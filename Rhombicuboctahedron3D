from manim import *

class Rhombicuboctahedron3D(ThreeDScene):
    def construct(self):
        # Set up the 3D camera
        self.set_camera_orientation(phi=75 * DEGREES, theta=30 * DEGREES)

        # Define vertices of the rhombicuboctahedron
        s = 1  # Scale factor
        vertices = [
            [s, s, s], [-s, s, s], [s, -s, s], [-s, -s, s],  # Top square
            [s, s, -s], [-s, s, -s], [s, -s, -s], [-s, -s, -s],  # Bottom square
            [s*1.414, 0, s*1.414], [-s*1.414, 0, s*1.414], [0, s*1.414, s*1.414], [0, -s*1.414, s*1.414],  # Front plane
            [s*1.414, 0, -s*1.414], [-s*1.414, 0, -s*1.414], [0, s*1.414, -s*1.414], [0, -s*1.414, -s*1.414],  # Back plane
            [s*1.414, s*1.414, 0], [s*1.414, -s*1.414, 0], [-s*1.414, s*1.414, 0], [-s*1.414, -s*1.414, 0],  # Right/left planes
            [s, s*1.414, 0], [s, -s*1.414, 0], [-s, s*1.414, 0], [-s, -s*1.414, 0]  # Middle plane
        ]

        # Define faces (8 triangles and 18 squares)
        faces = [
            # Triangles (8)
            [0, 10, 20], [2, 11, 21], [4, 14, 16], [6, 15, 17],
            [1, 10, 22], [3, 11, 23], [5, 14, 18], [7, 15, 19],
            # Squares (18)
            [0, 2, 6, 4], [1, 3, 7, 5], [0, 10, 1, 22], [2, 11, 3, 23],
            [4, 14, 5, 18], [6, 15, 7, 19], [0, 16, 4, 20], [1, 18, 5, 22],
            [2, 17, 6, 21], [3, 19, 7, 23], [8, 9, 11, 2], [8, 9, 10, 0],
            [12, 13, 15, 6], [12, 13, 14, 4], [16, 17, 21, 20], [18, 19, 23, 22],
            [8, 12, 16, 20], [9, 13, 17, 21]
        ]

        # Create the polyhedron with only faces_config
        polyhedron_faces = Polyhedron(
            vertex_coords=vertices,
            faces_list=faces,
            faces_config={"fill_color": BLUE, "fill_opacity": 0.5, "shade_in_3d": True}
        )

        # Manually define edges as a separate VGroup
        edges = VGroup()
        edge_set = set()  # To avoid duplicate edges
        for face in faces:
            for i in range(len(face)):
                v1, v2 = face[i], face[(i + 1) % len(face)]
                edge = tuple(sorted([v1, v2]))
                if edge not in edge_set:
                    edge_set.add(edge)
                    edges.add(Line3D(
                        start=vertices[v1],
                        end=vertices[v2],
                        color=YELLOW,
                        thickness=0.02
                    ))

        # Combine faces and edges into one group
        polyhedron = VGroup(polyhedron_faces, edges)

        # Animate the creation
        self.play(Create(polyhedron), run_time=3)
        
        # Rotate the polyhedron
        self.begin_ambient_camera_rotation(rate=PI/4)
        self.wait(4)
        
        # Fade out
        self.play(FadeOut(polyhedron))
        self.wait(1)
